---
layout: post
title:  “Игнорирование файлов в Git"
date:   2015-01-27 22:54:45
categories: git
---
## Знакомство с игнорированием файлов в Git

> Краткое описание вопроса игнорирования файлов в Git. Два способа игнорирования файлов - локальный и глобальный. Шаблоны для игнорирования файлов в для различных операционных систем, языков программирования, CMS и т. д. Игнорирование уже отлеживаемого файла в Git. Отслеживание пустых директорий.

### Шаблоны правил для .gitignore

Два ресурса на GitHub, в которых собраны **шаблоны** файла `.gitignore` для разных случаев - разных операционных систем, разных языков программирования и т. д.

#### Общий список правил

По ссылке ниже представлен **набор общих правил и рекомендаций** при создании файла `.gitignore`. Помимо этого, в данном разделе показан шаблон для самого общего случая использования `.gitignore`:

[Общий список правил игнорирования файлов в Git][git_common_rules]

#### Деталированный список правил

По ссылке ниже представлен **более детальный и полезный список** правил, по которым создается файл `.gitignore`. В этом списке можно найти рекомендации для разных операционных систем (Linux, Mac OS X, Windows, Android), разных языков программирования (Java, Perl  и т. д.), различных CMS (к примеру - Joomla, Magento, Jekyll). Даже для README есть свой набор правил!

[Деталированный список правил игнорирования файлов в Git][git_detailed_rules]

Помимо списка языков программирования, в котором для каждого пункта этого списка представлены рекомендованные правила для файла `.gitignore`, имеется еще дополнительная директория **Global**.

Как раз в этой директории располагается **список рекомендаций применительно к операционным системам**. Достаточно найти нужную систему, перейти по ссылке и воспользоваться набором правил.

### Глобальное игнорирование

В Git возможно игнорирование файлов двумя способами:

- локально
- глобально

В последнем случае (*глобально*) имеется ввиду, что Git будет игнорировать указанные файлы всегда, **в любом из проектов**.

Ярким примером такого **глобального игнорирования** являются служебные файлы операционной системы - они должны игнорироваться всегда и в любом проекте Git.

Файл конфигурации с глобальным игнорированием может быть назван **как угодно** (в отличие от файла `.gitignore`). Главное - он должен располагаться в домашней директории пользователя, а не в директории с проектом. И это его главное отличие от файла `.gitignore`.

После того, как файл глобального игнорирования создан, необходимо добавить его в конфигурационный файл Git. То есть, “сказать” Git, что “у тебя есть список файлов, которые ты должен игнорировать; этот список называется так и расположен он здесь”.

Выполняется это командой:

{% highlight cli %}
git config --global core.excludesfile ~/.gitignore_global 
{% endhighlight %}

Если теперь взглянуть на конфигурационный файл Git, то увидим следующее:

{% highlight cli %}
$ cat ~/.gitconfig 
[user]
	name = g***e
	email = g***e@gmail.com
[core]
	excludesfile = /Users/g***e/.gitignore_global
{% endhighlight %}

### Игнорирование отслеживаемого файла

Может возникнуть ситуация, когда файл был создан и помещен в репозиторий Git. То есть, теперь он является отслеживаемым.

Но это была ошибка - этот файл не нужно было отслеживать! Как сказать Git, чтобы он не отслеживал этот файл?

Для этого нужно выполнить два шага.

**Первый** - это внести имя нужного файла в список игнорируемых файлов - отредактировать файл `.gitignore`.

Однако, этот шаг еще ничего не даст - Git все также будет его отслеживать, так как он уже внесен в **буфера обмена**.

Для этого нужно “вынуть” данный файл из **буфера обмена**. Это выполняется командой:

{% highlight cli %}
git rm —cached name_of_file
{% endhighlight %}

Данная команда удалит указанный файл из **буфера обмена**, однако оставит в рабочей директории и в репозитории. Последующий коммит произведет удаление этого файла и из репозитория.

Осталось только выполнить коммит обоих изменений - *добавление файла в игнорируемые* и *удаление его из репозитория*.

Все последующие изменения в этом файле *отслеживаться не будут*.

### Отслеживание пустых директорий

У Git имеется одна очень неочевидная особенность, которая сбивает с толку прозелитов и в один прекрасный момент может их подвести, если они не знают о данном факте.

Заключается он в том, что Git - это система контроля версий **для файлов**! Другими словами - **Git умеет отслеживать только файлы**!

Поэтому, если в проекте имеется **пустая директория**, то Git ее просто “выкинет”. По той простой причине, что  точки зрения Git директория - всего лишь путь к файлу, способ найти отлеживаемый файл. А раз файла нет, то путь ведет *вникуда*, так как отслеживать *нечего*.

Кстати сказать, я сам когда-то был таким новичком и столкнулся с этим непонятным для меня фактом. Интуитивно догадался, в чем дело и поступал таким “корявым” (*как я считал*) способом.

К примеру, для директории psd я создавал файл-заглушку `dummy.psd` размером 1px*1px. Главное - чтобы в директории psd что-то лежало - тогда Git не удалит ее! )

Как оказалось, я был прав! И это единственный правильный способ заставить Git *отслеживать пустые директории*.

Одна только *маленькая поправка* - в мире Unix такой файл-заглушку можно создать с помощью команды `touch` и выглядеть такой файл будет так (*общепринятое соглашение*):

{% highlight cli %}
.gitkeep
{% endhighlight %}

Что же - этот способ более аккуратный и грамотный! )

[git_common_rules]:	https://help.github.com/articles/ignoring-files/
[git_detailed_rules]: https://github.com/github/gitignore

